/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.dbmsproj;

import com.mycompany.dbmsproj.Subscriptions.Utils;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SWASTHIK
 */
public class Members extends javax.swing.JFrame {
   int b;
    /**
     * Creates new form Members
     */
    public Members(int a) throws SQLException{
        b=a;
        initComponents();
        populateMembersIDs();
        setExtendedState(Members.MAXIMIZED_BOTH);
        if(b==0){
            jLabel1.setVisible(false);
            jLabel8.setVisible(false);
            memnameTEXT.setVisible(false);
            jLabel9.setVisible(false);
            heightTEXT.setVisible(false);
            jLabel10.setVisible(false);
            emailTEXT.setVisible(false);
            jLabel12.setVisible(false);
            jLabel11.setVisible(false);
            phoneTEXT.setVisible(false);
            jLabel17.setVisible(false);
            dobTEXT.setVisible(false);
            jLabel19.setVisible(false);
            joinTEXT.setVisible(false);
            jLabel18.setVisible(false);
            TidTEXT.setVisible(false);
            jLabel20.setVisible(false);
            PidTEXT.setVisible(false);
            memberINSERT.setVisible(false);
            jLabel13.setVisible(false);
            jLabel14.setVisible(false);
            memid_delTEXT.setVisible(false);
            membersDelete.setVisible(false);
            jLabel15.setVisible(false);
            jLabel16.setVisible(false);
            memupdateCombo.setVisible(false);
            jLabel7.setVisible(false);
            up_nameTEXT.setVisible(false);
            jLabel24.setVisible(false);
            upemailTEXT.setVisible(false);
            upphoneTEXT.setVisible(false);
            jLabel25.setVisible(false);
            jLabel21.setVisible(false);
            upjoinTEXT.setVisible(false);
            jLabel26.setVisible(false);
            jLabel27.setVisible(false);
            jLabel28.setVisible(false);
            jLabel29.setVisible(false);
            jLabel30.setVisible(false);
            upheightTEXT.setVisible(false);
            upweightTEXT.setVisible(false);
            updobTEXT.setVisible(false);
            upTridTEXT.setVisible(false);
            uppackidTEXT.setVisible(false);
            membersUpdate.setVisible(false);
            jPanel1.setVisible(false);
            jPanel3.setVisible(false);
            jPanel4.setVisible(false);
        }
    }
private Members() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

private void populateMembersIDs() {
    try {
        // Establish database connection
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

        // Clear existing items in the JComboBox
        memupdateCombo.removeAllItems();

        // Execute SQL query to fetch Member IDs sorted
        String query = "SELECT M_ID FROM members ORDER BY M_ID";
        try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                Object memID = rs.getObject("M_ID");
                memupdateCombo.addItem(memID.toString());
            }
        }

        // Close the database connection
        con.close();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        membertableview = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxSortMem = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        membersSORT = new javax.swing.JButton();
        members_back = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        memnameTEXT = new javax.swing.JTextField();
        memberINSERT = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        emailTEXT = new javax.swing.JTextField();
        phoneTEXT = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        heightTEXT = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        weightTEXT = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        dobTEXT = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        TidTEXT = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        PidTEXT = new javax.swing.JTextField();
        joinTEXT = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        memid_delTEXT = new javax.swing.JTextField();
        membersDelete = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        membersUpdate = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        up_nameTEXT = new javax.swing.JTextField();
        upemailTEXT = new javax.swing.JTextField();
        upphoneTEXT = new javax.swing.JTextField();
        upheightTEXT = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        upweightTEXT = new javax.swing.JTextField();
        updobTEXT = new javax.swing.JTextField();
        upTridTEXT = new javax.swing.JTextField();
        uppackidTEXT = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        upjoinTEXT = new javax.swing.JTextField();
        memupdateCombo = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        memberTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        trainerID = new javax.swing.JTextField();
        checkMembers = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1920, 1080));

        jPanel2.setBackground(new java.awt.Color(153, 0, 51));
        jPanel2.setPreferredSize(new java.awt.Dimension(960, 1080));

        membertableview.setBackground(new java.awt.Color(204, 204, 204));
        membertableview.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        membertableview.setText("View All");
        membertableview.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        membertableview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                membertableviewActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Filters : ");

        jComboBoxSortMem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Join_Date(Aescending)", "Join_Date(Descending)" }));
        jComboBoxSortMem.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jComboBoxSortMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSortMemActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Sort By");

        membersSORT.setBackground(new java.awt.Color(204, 204, 204));
        membersSORT.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        membersSORT.setText("Sort");
        membersSORT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        membersSORT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                membersSORTActionPerformed(evt);
            }
        });

        members_back.setBackground(new java.awt.Color(204, 204, 204));
        members_back.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        members_back.setText("<");
        members_back.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        members_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                members_backActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Members ");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 2));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 51));
        jLabel1.setText("ADD New Member : ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 41));

        jLabel8.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 0, 51));
        jLabel8.setText("Name :");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 60, 35));

        memnameTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        memnameTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        memnameTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memnameTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(memnameTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 110, 40));

        memberINSERT.setBackground(new java.awt.Color(153, 0, 51));
        memberINSERT.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        memberINSERT.setForeground(new java.awt.Color(255, 255, 255));
        memberINSERT.setText("INSERT");
        memberINSERT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        memberINSERT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberINSERTActionPerformed(evt);
            }
        });
        jPanel1.add(memberINSERT, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 330, 70, 40));

        jLabel11.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 0, 51));
        jLabel11.setText("Phone :");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, 70, 33));

        jLabel10.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 0, 51));
        jLabel10.setText("E-Mail :");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 60, 36));

        emailTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        emailTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        emailTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(emailTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, 110, 40));

        phoneTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        phoneTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.add(phoneTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 180, 110, 40));

        jLabel9.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 0, 51));
        jLabel9.setText("Height(in cm) :");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 80, 110, 30));

        heightTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.add(heightTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 70, 120, 40));

        jLabel12.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(153, 0, 51));
        jLabel12.setText("Weight(in kg) :");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 130, -1, -1));

        weightTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.add(weightTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 120, 120, 40));

        jLabel17.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(153, 0, 51));
        jLabel17.setText("DOB :");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 180, -1, -1));

        dobTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.add(dobTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 170, 120, 40));

        jLabel18.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(153, 0, 51));
        jLabel18.setText("Tr_ID :");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 230, -1, -1));

        TidTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.add(TidTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 220, 120, 40));

        jLabel20.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(153, 0, 51));
        jLabel20.setText("Pack_ID :");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 280, -1, -1));

        PidTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.add(PidTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 270, 120, 40));

        joinTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.add(joinTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 230, 110, 40));

        jLabel19.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(153, 0, 51));
        jLabel19.setText("Join_Date :");
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 230, -1, 40));

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 2));

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 0, 51));
        jLabel13.setText("DELETE Member : ");

        jLabel14.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(153, 0, 51));
        jLabel14.setText("Enter Mem_ID :");

        memid_delTEXT.setFont(new java.awt.Font("Segoe UI Historic", 0, 18)); // NOI18N
        memid_delTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        memid_delTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memid_delTEXTActionPerformed(evt);
            }
        });

        membersDelete.setBackground(new java.awt.Color(153, 0, 51));
        membersDelete.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        membersDelete.setForeground(new java.awt.Color(255, 255, 255));
        membersDelete.setText("DELETE");
        membersDelete.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        membersDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                membersDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(memid_delTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel13))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(membersDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(memid_delTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(membersDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(129, 129, 129))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 2));
        jPanel4.setForeground(new java.awt.Color(153, 0, 51));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(153, 0, 51));
        jLabel15.setText("UPDATE Member : ");
        jPanel4.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 11, -1, 41));

        jLabel16.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(153, 0, 51));
        jLabel16.setText("Select : ");
        jPanel4.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        membersUpdate.setBackground(new java.awt.Color(153, 0, 51));
        membersUpdate.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        membersUpdate.setForeground(new java.awt.Color(255, 255, 255));
        membersUpdate.setText("UPDATE");
        membersUpdate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        membersUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                membersUpdateActionPerformed(evt);
            }
        });
        jPanel4.add(membersUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 340, 72, 37));

        jLabel7.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 51));
        jLabel7.setText("Name :");
        jPanel4.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 60, 40));

        jLabel24.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(153, 0, 51));
        jLabel24.setText("E-Mail :");
        jPanel4.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 70, 40));

        jLabel25.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(153, 0, 51));
        jLabel25.setText("Phone :");
        jPanel4.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 70, 40));

        jLabel26.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(153, 0, 51));
        jLabel26.setText("Height :");
        jPanel4.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 90, 70, 40));

        up_nameTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.add(up_nameTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 130, 40));

        upemailTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.add(upemailTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 130, 40));

        upphoneTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        upphoneTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upphoneTEXTActionPerformed(evt);
            }
        });
        jPanel4.add(upphoneTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, 130, 40));

        upheightTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.add(upheightTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 90, 150, 40));

        jLabel27.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(153, 0, 51));
        jLabel27.setText("Weight :");
        jPanel4.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 140, 60, 40));

        jLabel28.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(153, 0, 51));
        jLabel28.setText("DOB :");
        jPanel4.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 190, 50, 40));

        jLabel29.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(153, 0, 51));
        jLabel29.setText("Pack _ID :");
        jPanel4.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 290, 70, 40));

        jLabel30.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(153, 0, 51));
        jLabel30.setText("Tr_ ID :");
        jPanel4.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 240, 70, 40));

        upweightTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.add(upweightTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 140, 150, 40));

        updobTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.add(updobTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 190, 150, 40));

        upTridTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.add(upTridTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 240, 150, 40));

        uppackidTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.add(uppackidTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 290, 150, 40));

        jLabel21.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(153, 0, 51));
        jLabel21.setText("Join_Date :");
        jPanel4.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, 40));

        upjoinTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.add(upjoinTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 270, 130, 40));
        jPanel4.add(memupdateCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 100, 40));

        memberTable.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        memberTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mem_ID", "Mem_Name", "E-mail", "Phone", "Join-Date", "Height", "Weight", "BMI", "DOB", "Tr_ID", "Pack_ID", "Age"
            }
        ));
        jScrollPane2.setViewportView(memberTable);

        jLabel6.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Management ");

        jLabel22.setFont(new java.awt.Font("STXihei", 1, 16)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Members training under :");

        jLabel23.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Enter Trainer ID :");

        trainerID.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        trainerID.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        checkMembers.setBackground(new java.awt.Color(204, 204, 204));
        checkMembers.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        checkMembers.setText("Check");
        checkMembers.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkMembers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMembersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(membertableview, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel6))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(members_back, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1073, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(402, 402, 402))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(membersSORT, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxSortMem, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(trainerID, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(checkMembers, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(members_back, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel4))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxSortMem, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(membersSORT, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(membertableview, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(trainerID, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(checkMembers, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(238, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 2036, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void membersDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_membersDeleteActionPerformed
        // TODO add your handling code here:
        String deletememID = memid_delTEXT.getText();

        // Check if the T_ID is empty
        if(b==1){
            if (deletememID.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Enter a Member ID to delete", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Call the deleteTrainer method to perform the deletion
            deleteMembers(deletememID);
            populateMembersIDs();
        }else{
            JOptionPane.showMessageDialog(null, "Members do not have permission to delete.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
            refreshMembersTable();
        }

        // Method to delete a trainer based on T_ID
        //
    }//GEN-LAST:event_membersDeleteActionPerformed
    private void deleteMembers(String memID) {
        try {
        // Establish a database connection
        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52")) {
            // Create and execute the SQL DELETE statement
            String sql = "DELETE FROM members WHERE M_ID = ?";
            try (PreparedStatement pstmt = con.prepareStatement(sql)) {
                // Use setObject to handle both string and integer types
                pstmt.setObject(1, memID);

                // Execute the DELETE statement
                int rowsDeleted = pstmt.executeUpdate();

                if (rowsDeleted > 0) {
                    System.out.println("Member with M_ID " + memID + " deleted successfully!");
                    JOptionPane.showMessageDialog(null, "Member Deleted successfully.");

                    // Refresh the JTable to reflect the changes
                    refreshMembersTable();
                    // Optionally, clear the text field after successful deletion
                    memid_delTEXT.setText("");
                } else {
                    System.out.println("No Members found with M_ID " + memID);
                    JOptionPane.showMessageDialog(null, "No Members found with M_ID " + memID, "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
//        JOptionPane.showMessageDialog(null, "Error deleting subscription. Check the console for details.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void memid_delTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memid_delTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_memid_delTEXTActionPerformed

    private void emailTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailTEXTActionPerformed

    private void memberINSERTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberINSERTActionPerformed
        // TODO add your handling code here:
        try {
    // Retrieve data from text fields
    String memberName = memnameTEXT.getText();
    String email = emailTEXT.getText();
    String phone = phoneTEXT.getText();
    String joinDate = joinTEXT.getText();
    String heightStr = heightTEXT.getText();
    String weightStr = weightTEXT.getText();
    String dob = dobTEXT.getText();
    String trainerIDStr = TidTEXT.getText();
    String packID = PidTEXT.getText();

    // Check if any field is empty
    if(b==1){
        if (memberName.isEmpty() || email.isEmpty() || phone.isEmpty() || joinDate.isEmpty() || heightStr.isEmpty() || weightStr.isEmpty() || dob.isEmpty() || trainerIDStr.isEmpty() || packID.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Fill all the details", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if any field is empty
        }

        // Check if phone number contains only digits
        if (!phone.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "Invalid Phone number. Please enter digits only.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if join date is in yyyy-mm-dd format
        if (!joinDate.matches("\\d{4}-\\d{2}-\\d{2}")) {
            JOptionPane.showMessageDialog(null, "Invalid Join_Date format. Please use YYYY-MM-DD.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if height contains only digits
        if (!heightStr.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "Invalid Height. Please enter digits only.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if weight contains only digits
        if (!weightStr.matches("\\d+(\\.\\d+)?")) {
            JOptionPane.showMessageDialog(null, "Invalid Weight. Please enter digits only.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if date of birth is in yyyy-mm-dd format
        if (!dob.matches("\\d{4}-\\d{2}-\\d{2}")) {
            JOptionPane.showMessageDialog(null, "Invalid DOB format. Please use YYYY-MM-DD.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Parse data to the appropriate types
        int height = Integer.parseInt(heightStr);
        double weight = Double.parseDouble(weightStr);
        int trainerID = Integer.parseInt(trainerIDStr);

        // Establish database connection
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

        // Create and execute the SQL INSERT statement for members
        String sql = "INSERT INTO members (M_name, Email, Phone, Join_date, Height, Weight, DOB, Trainer_ID, Pack_ID) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, memberName);
            pstmt.setString(2, email);
            pstmt.setString(3, phone);
            pstmt.setString(4, joinDate);
            pstmt.setInt(5, height);
            pstmt.setDouble(6, weight);
            pstmt.setString(7, dob);
            pstmt.setInt(8, trainerID);
            pstmt.setString(9, packID);

            // Execute the INSERT statement
            int rowsInserted = pstmt.executeUpdate();

            if (rowsInserted > 0) {
                // Display a popup message
                JOptionPane.showMessageDialog(null, "Member inserted successfully!");
                refreshMembersTable();
                memnameTEXT.setText("");
                emailTEXT.setText("");
                phoneTEXT.setText("");
                joinTEXT.setText("");
                heightTEXT.setText("");
                weightTEXT.setText("");
                dobTEXT.setText("");
                TidTEXT.setText("");
                PidTEXT.setText("");
                
                // Update the member IDs in the JComboBox (if you have one)
                populateMembersIDs();
            } else {
                System.out.println("Failed to insert member details. No rows affected.");
            }
        }
        // Close the database connection
        con.close();
    } else {
        JOptionPane.showMessageDialog(null, "Members do not have permission to insert.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
        refreshMembersTable();
    }
} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(null, "Invalid format. Please enter valid numbers.", "Error", JOptionPane.ERROR_MESSAGE);
} catch (Exception ex) {
    ex.printStackTrace();
}

    }//GEN-LAST:event_memberINSERTActionPerformed

    private void memnameTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memnameTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_memnameTEXTActionPerformed

    private void members_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_members_backActionPerformed
        // TODO add your handling code here:
        dispose();
        HomePage h = new HomePage(b);
        h.show();
    }//GEN-LAST:event_members_backActionPerformed

    private void membersSORTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_membersSORTActionPerformed
        // TODO add your handling code here:
        try {
    String selectedOption = (String) jComboBoxSortMem.getSelectedItem();

    Class.forName("com.mysql.cj.jdbc.Driver");
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

    Statement stm = con.createStatement();
    ResultSet rs = null;

    String sql = "";

    if ("Join_Date(Aescending)".equalsIgnoreCase(selectedOption)) {
        sql = "SELECT * FROM members ORDER BY join_date ASC";
    } else if ("Join_Date(Descending)".equalsIgnoreCase(selectedOption)) {
        sql = "SELECT * FROM members ORDER BY join_date DESC";
    }

    System.out.println("Executing Query: " + sql); // Print the SQL query to the console

    if (!sql.isEmpty()) {
        rs = stm.executeQuery(sql);
    }

    if (rs != null) {
        DefaultTableModel model = (DefaultTableModel) memberTable.getModel();
        model.setRowCount(0);

        while (rs.next()) {
            String mID = rs.getString("M_ID");
            String mName = rs.getString("M_name");
            String email = rs.getString("Email");
            String phone = rs.getString("Phone");
            Date joinDate = rs.getDate("join_date");
            double height = rs.getDouble("Height");
            double weight = rs.getDouble("Weight");
            double bmi = rs.getDouble("BMI");
            Date dob = rs.getDate("DOB");
            int trainerID = rs.getInt("Trainer_ID");
            String packID = rs.getString("Pack_ID");
            int age = rs.getInt("Age");

    model.addRow(new Object[]{mID, mName, email, phone, joinDate, height, weight, bmi, dob, trainerID, packID, age});
}


        con.close();
    }
} catch (Exception e) {
    e.printStackTrace();
}

    }//GEN-LAST:event_membersSORTActionPerformed

    private void jComboBoxSortMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSortMemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxSortMemActionPerformed

    private void membertableviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_membertableviewActionPerformed
        // TODO add your handling code here:
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false", "root", "swasthik@52");

            Statement st = con.createStatement();
            String sql = "SELECT * FROM members";
            ResultSet rs = st.executeQuery(sql);

            // Clear existing data outside the loop
            javax.swing.table.DefaultTableModel model1 = (javax.swing.table.DefaultTableModel) memberTable.getModel();
            model1.setRowCount(0);

            while (rs.next()) {
                String memid = rs.getString("M_ID");
                String name = rs.getString("M_name");
                String email = rs.getString("Email");
                String phone = rs.getString("Phone");
                String joindate = rs.getString("Join_date");
                String height = rs.getString("Height");
                String weight = rs.getString("Weight");
                String bmi = rs.getString("BMI");
                String dob = rs.getString("dob");
                String trid = rs.getString("Trainer_ID");
                String pack = rs.getString("Pack_ID");
                String age = rs.getString("Age");

                // Add a new row to the JTable
                model1.addRow(new Object[]{memid, name, email, phone, joindate, height, weight, bmi, dob, trid, pack, age});
            }

            con.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_membertableviewActionPerformed

    private void membersUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_membersUpdateActionPerformed
        // TODO add your handling code here:
            try {
    // Retrieve data from text fields
    String memberName = up_nameTEXT.getText();
    String email = upemailTEXT.getText();
    String phone = upphoneTEXT.getText();
    String joinDate = upjoinTEXT.getText();
    String dob = updobTEXT.getText();
    String packId = uppackidTEXT.getText();

    // Check if any field is empty
    if (memberName.isEmpty() || email.isEmpty() || phone.isEmpty() || joinDate.isEmpty() || dob.isEmpty() || packId.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Fill all the details", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if any field is empty
    }

    int height = 0; // Initialize height to 0
    double weight = 0.0; // Initialize weight to 0.0

    // Parse height if not empty
    String heightText = upheightTEXT.getText();
    if (!heightText.isEmpty()) {
        try {
            height = Integer.parseInt(heightText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid height. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    // Parse weight if not empty
    String weightText = upweightTEXT.getText();
    if (!weightText.isEmpty()) {
        try {
            weight = Double.parseDouble(weightText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid weight. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    // Validate phone number
    if (!phone.matches("\\d+")) {
        JOptionPane.showMessageDialog(null, "Invalid phone number. Please enter digits only.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validate join date format
    if (!joinDate.matches("\\d{4}-\\d{2}-\\d{2}")) {
        JOptionPane.showMessageDialog(null, "Invalid join date format. Please use yyyy-mm-dd format.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validate DOB format
    if (!dob.matches("\\d{4}-\\d{2}-\\d{2}")) {
        JOptionPane.showMessageDialog(null, "Invalid DOB format. Please use yyyy-mm-dd format.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Retrieve trainer ID
    int trainerId;
    try {
        trainerId = Integer.parseInt(upTridTEXT.getText());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid trainer ID. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String selectedMemberId = (String) memupdateCombo.getSelectedItem();

    // Establish database connection
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

    // Execute SQL Update Statement
    String updateSql = "UPDATE members SET M_name = ?, Email = ?, Phone = ?, Join_date = ?, Height = ?, Weight = ?, DOB = ?, Trainer_ID = ?, Pack_ID = ? WHERE M_ID = ?";
    try (PreparedStatement pstmt = con.prepareStatement(updateSql)) {
        pstmt.setString(1, memberName);
        pstmt.setString(2, email);
        pstmt.setString(3, phone);
        pstmt.setString(4, joinDate);
        pstmt.setInt(5, height);
        pstmt.setDouble(6, weight);
        pstmt.setString(7, dob);
        pstmt.setInt(8, trainerId);
        pstmt.setString(9, packId);
        pstmt.setString(10, selectedMemberId); // Assuming memberIdTextField is the ID field

        int rowsUpdated = pstmt.executeUpdate();

        if (rowsUpdated > 0) {
            System.out.println("Member details updated successfully!");
            JOptionPane.showMessageDialog(null, "Member details updated successfully!");
            // Optionally, you can display a success message or perform additional actions
            refreshMembersTable();
            up_nameTEXT.setText("");
            upemailTEXT.setText("");
            upphoneTEXT.setText("");
            upjoinTEXT.setText("");
            upheightTEXT.setText("");
            upweightTEXT.setText("");
            updobTEXT.setText("");
            upTridTEXT.setText("");
            uppackidTEXT.setText("");
            // Clear text fields after successful update
        } else {
            JOptionPane.showMessageDialog(null, "No member found with the given ID. Update failed.", "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("Failed to update member details. No rows affected.");
            // Optionally, you can display an error message or perform additional actions
        }
    }
    // Close the database connection
    con.close();
    populateMembersIDs();
} catch (Exception ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(null, "Error updating member details. Check the console for details.", "Error", JOptionPane.ERROR_MESSAGE);
}


    }//GEN-LAST:event_membersUpdateActionPerformed

    private void upphoneTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upphoneTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_upphoneTEXTActionPerformed

    private void checkMembersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMembersActionPerformed
        // TODO add your handling code here:
        String trainID = trainerID.getText().trim();

    // Check if the trainer ID is empty
    if (trainID.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter a trainer ID.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Execute the SQL query to fetch member details for the specified trainer ID
    String sql = "SELECT M_name, Phone " +
                 "FROM members " +
                 "WHERE Trainer_ID = ?";

    try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");
         PreparedStatement pstmt = con.prepareStatement(sql)) {

        // Set the trainer ID parameter
        pstmt.setString(1, trainID);

        // Execute the query
        try (ResultSet rs = pstmt.executeQuery()) {
            // Convert the ResultSet into a DefaultTableModel
            DefaultTableModel model = Utils.buildTableModel(rs);

            // Display the table containing member details in a popup window
            JTable table = new JTable(model);
            JOptionPane.showMessageDialog(null, new JScrollPane(table), "Members Training under Trainer ID: " + trainID, JOptionPane.INFORMATION_MESSAGE);
            trainerID.setText("");
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error: Unable to fetch member details.", "Error", JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_checkMembersActionPerformed
    
    private void refreshMembersTable() {
    // Implement code to refresh the JTable (re-fetch data from the database and update the table model)
    // For example, if you have a method 'fetchTrainersData()' to fetch data, call it here
    // fetchTrainersData();
    DefaultTableModel model = (DefaultTableModel) memberTable.getModel();
    model.setRowCount(0); // Clear existing data
    fetchMemberData();
    // And then update the JTable model
    // jTable1.setModel(new DefaultTableModel(data, columnNames))
}
    
    private void fetchMemberData() {
    try {
        // Establish a database connection
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

        // Create and execute the SQL SELECT statement
        String sql = "SELECT * FROM members";
        try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            DefaultTableModel model = (DefaultTableModel) memberTable.getModel();
            model.setRowCount(0); // Clear existing data

            // Iterate through the result set and add rows to the table model
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("M_ID"),
                    rs.getString("M_name"),
                    rs.getString("Email"),
                    rs.getString("Phone"),
                    rs.getString("Join_date"),
                    rs.getInt("Height"),
                    rs.getDouble("Weight"),
                    rs.getDouble("BMI"),
                    rs.getString("DOB"),
                    rs.getInt("Trainer_ID"),
                    rs.getString("Pack_ID"),
                    rs.getInt("Age"), // Assuming you have the Age column in the members table
                };
                model.addRow(row);
            }
        }

        // Close the database connection
        con.close();
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error fetching member data. Check the console for details.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    /** 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Members.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Members.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Members.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Members.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Members().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField PidTEXT;
    private javax.swing.JTextField TidTEXT;
    private javax.swing.JButton checkMembers;
    private javax.swing.JTextField dobTEXT;
    private javax.swing.JTextField emailTEXT;
    private javax.swing.JTextField heightTEXT;
    private javax.swing.JComboBox<String> jComboBoxSortMem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField joinTEXT;
    private javax.swing.JButton memberINSERT;
    private javax.swing.JTable memberTable;
    private javax.swing.JButton membersDelete;
    private javax.swing.JButton membersSORT;
    private javax.swing.JButton membersUpdate;
    private javax.swing.JButton members_back;
    private javax.swing.JButton membertableview;
    private javax.swing.JTextField memid_delTEXT;
    private javax.swing.JTextField memnameTEXT;
    private javax.swing.JComboBox<String> memupdateCombo;
    private javax.swing.JTextField phoneTEXT;
    private javax.swing.JTextField trainerID;
    private javax.swing.JTextField upTridTEXT;
    private javax.swing.JTextField up_nameTEXT;
    private javax.swing.JTextField updobTEXT;
    private javax.swing.JTextField upemailTEXT;
    private javax.swing.JTextField upheightTEXT;
    private javax.swing.JTextField upjoinTEXT;
    private javax.swing.JTextField uppackidTEXT;
    private javax.swing.JTextField upphoneTEXT;
    private javax.swing.JTextField upweightTEXT;
    private javax.swing.JTextField weightTEXT;
    // End of variables declaration//GEN-END:variables
}
