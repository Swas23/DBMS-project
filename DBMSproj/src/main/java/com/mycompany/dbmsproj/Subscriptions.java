/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.dbmsproj;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SWASTHIK
 */
public class Subscriptions extends javax.swing.JFrame {
int b;
    /**
     * Creates new form Subscriptions
     */
    public Subscriptions(int a) throws SQLException {
        b=a;
        initComponents();
        populateSubscriptionIDs();
        setExtendedState(Subscriptions.MAXIMIZED_BOTH);
        if(b==0){
            jLabel1.setVisible(false);
            jLabel7.setVisible(false);
            jLabel8.setVisible(false);
            jLabel10.setVisible(false);
            jLabel11.setVisible(false);
            subidTEXT.setVisible(false);
            priceTEXT.setVisible(false);
            durationTEXT.setVisible(false);
            subscribedTEXT.setVisible(false);
            subscriptionINSERT.setVisible(false);
            jLabel13.setVisible(false);
            jLabel14.setVisible(false);
            subid_delTEXT.setVisible(false);
            jButton2.setVisible(false);
            jLabel15.setVisible(false);
            updateOP.setVisible(false);
            jLabel16.setVisible(false);
            up_priceTEXT.setVisible(false);
            jLabel19.setVisible(false);
            jLabel21.setVisible(false);
            up_subscribedTEXT.setVisible(false);
            up_durationTEXT.setVisible(false);
            subscriptionUpdate.setVisible(false);
            jPanel1.setVisible(false);
            jPanel3.setVisible(false);
            jPanel4.setVisible(false);
        }
      
    }
    
    private Subscriptions() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    private void populateSubscriptionIDs() {
        try {
        // Establish database connection
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

        // Clear existing items in the JComboBox
        updateOP.removeAllItems();

        // Execute SQL query to fetch Trainer IDs
        String query = "SELECT Sub_ID FROM SUBSCRIPTIONS";
        try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                Object subID = rs.getObject("Sub_ID");
                updateOP.addItem(subID.toString());
            }
        }

        // Close the database connection
        con.close();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        subscriptiontableview = new javax.swing.JButton();
        jComboBoxSortSUB = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        subscriptionSORT = new javax.swing.JButton();
        subscription_back = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        subidTEXT = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        priceTEXT = new javax.swing.JTextField();
        subscriptionINSERT = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        durationTEXT = new javax.swing.JTextField();
        subscribedTEXT = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        subid_delTEXT = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        subscriptionUpdate = new javax.swing.JButton();
        up_priceTEXT = new javax.swing.JTextField();
        up_durationTEXT = new javax.swing.JTextField();
        up_subscribedTEXT = new javax.swing.JTextField();
        updateOP = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        subscriptionTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        packIDTEXT = new javax.swing.JTextField();
        checkout = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        subscriptionIDTextField = new javax.swing.JTextField();
        checkoutMem = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1920, 1080));

        jPanel2.setBackground(new java.awt.Color(153, 0, 51));
        jPanel2.setPreferredSize(new java.awt.Dimension(960, 1080));

        subscriptiontableview.setBackground(new java.awt.Color(204, 204, 204));
        subscriptiontableview.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        subscriptiontableview.setText("View All");
        subscriptiontableview.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        subscriptiontableview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subscriptiontableviewActionPerformed(evt);
            }
        });

        jComboBoxSortSUB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "price (Min-Max)", "price (Max-Min)", "Duration(Aescending)", "Duration(Descending)", " ", " " }));
        jComboBoxSortSUB.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jComboBoxSortSUB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSortSUBActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText(" Sort By :");

        subscriptionSORT.setBackground(new java.awt.Color(204, 204, 204));
        subscriptionSORT.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        subscriptionSORT.setText("Sort");
        subscriptionSORT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        subscriptionSORT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subscriptionSORTActionPerformed(evt);
            }
        });

        subscription_back.setBackground(new java.awt.Color(204, 204, 204));
        subscription_back.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        subscription_back.setText("<");
        subscription_back.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        subscription_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subscription_backActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Management");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 2));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 51));
        jLabel1.setText("ADD New Subscription : ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 41));

        jLabel7.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 51));
        jLabel7.setText("Sub_ID: ");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 60, 36));

        subidTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        subidTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        subidTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subidTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(subidTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 143, 36));

        jLabel8.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 0, 51));
        jLabel8.setText("Price : ");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 60, 35));

        priceTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        priceTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        priceTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(priceTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, 143, 40));

        subscriptionINSERT.setBackground(new java.awt.Color(153, 0, 51));
        subscriptionINSERT.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        subscriptionINSERT.setForeground(new java.awt.Color(255, 255, 255));
        subscriptionINSERT.setText("INSERT");
        subscriptionINSERT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        subscriptionINSERT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subscriptionINSERTActionPerformed(evt);
            }
        });
        jPanel1.add(subscriptionINSERT, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 300, 70, 40));

        jLabel11.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 0, 51));
        jLabel11.setText("Susbcribed : ");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 160, 90, 33));

        jLabel10.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 0, 51));
        jLabel10.setText("Duration : ");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, 80, 36));

        durationTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        durationTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        durationTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                durationTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(durationTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 100, 140, 40));

        subscribedTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        subscribedTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.add(subscribedTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 160, 140, 40));

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 2));

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 0, 51));
        jLabel13.setText("DELETE Subscription : ");

        jLabel14.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(153, 0, 51));
        jLabel14.setText("Enter Sub_ID :");

        subid_delTEXT.setFont(new java.awt.Font("Segoe UI Historic", 0, 18)); // NOI18N
        subid_delTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        subid_delTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subid_delTEXTActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(153, 0, 51));
        jButton2.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("DELETE");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addContainerGap(94, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subid_delTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subid_delTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 2));
        jPanel4.setForeground(new java.awt.Color(153, 0, 51));

        jLabel15.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(153, 0, 51));
        jLabel15.setText("UPDATE Subscription : ");

        jLabel16.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(153, 0, 51));
        jLabel16.setText("Select : ");

        jLabel19.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(153, 0, 51));
        jLabel19.setText("Price :");

        jLabel21.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(153, 0, 51));
        jLabel21.setText("Duration :");

        jLabel22.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(153, 0, 51));
        jLabel22.setText("Subscribed :");

        subscriptionUpdate.setBackground(new java.awt.Color(153, 0, 51));
        subscriptionUpdate.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        subscriptionUpdate.setForeground(new java.awt.Color(255, 255, 255));
        subscriptionUpdate.setText("UPDATE");
        subscriptionUpdate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        subscriptionUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subscriptionUpdateActionPerformed(evt);
            }
        });

        up_priceTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        up_durationTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        up_subscribedTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        up_subscribedTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                up_subscribedTEXTActionPerformed(evt);
            }
        });

        updateOP.setToolTipText("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel16)
                        .addGap(31, 31, 31)
                        .addComponent(updateOP, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel15))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(subscriptionUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(244, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addGap(15, 15, 15)
                        .addComponent(up_subscribedTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(up_priceTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(up_durationTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(updateOP, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(up_durationTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(up_priceTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(up_subscribedTEXT)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(subscriptionUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        subscriptionTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        subscriptionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Sub_ID", "Price", "Duration_in_months", "Subscribed"
            }
        ));
        jScrollPane2.setViewportView(subscriptionTable);

        jLabel4.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Checkout the Excercise in a Pack :");

        jLabel6.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Enter Subscription ID :");

        packIDTEXT.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        packIDTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        packIDTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                packIDTEXTActionPerformed(evt);
            }
        });

        checkout.setBackground(new java.awt.Color(204, 204, 204));
        checkout.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        checkout.setText("Checkout");
        checkout.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText(" List of Members Subscribed to a Pack :");

        jLabel12.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Subscriptions ");

        jLabel17.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Enter Subscription ID :");

        subscriptionIDTextField.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        subscriptionIDTextField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        subscriptionIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subscriptionIDTextFieldActionPerformed(evt);
            }
        });

        checkoutMem.setBackground(new java.awt.Color(204, 204, 204));
        checkoutMem.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        checkoutMem.setText("Checkout");
        checkoutMem.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        checkoutMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutMemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(subscription_back, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(222, 222, 222))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(subscriptiontableview, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(30, 30, 30)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jComboBoxSortSUB, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(subscriptionSORT, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(packIDTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel9)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(76, 76, 76)
                                        .addComponent(jLabel17)
                                        .addGap(18, 18, 18)
                                        .addComponent(subscriptionIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(201, 201, 201)
                                .addComponent(checkoutMem, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(170, 170, 170)
                                .addComponent(checkout, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(393, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jLabel12)
                    .addContainerGap(1740, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxSortSUB, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subscriptionSORT, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(packIDTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(checkout, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subscriptionIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addComponent(checkoutMem, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(subscription_back, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(93, 93, 93)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(subscriptiontableview, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(243, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(81, 81, 81)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(947, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1920, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void subscriptiontableviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subscriptiontableviewActionPerformed
        // TODO add your handling code here:
        try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false", "root", "swasthik@52");

        Statement st = con.createStatement();
        String sql = "SELECT * FROM subscriptions";
        ResultSet rs = st.executeQuery(sql);

        // Clear existing data outside the loop
        javax.swing.table.DefaultTableModel model1 = (javax.swing.table.DefaultTableModel) subscriptionTable.getModel();
        model1.setRowCount(0);

        while (rs.next()) {
            String subid = rs.getString("Sub_ID");
            String price = rs.getString("Price");
            String duration = rs.getString("Duration_in_Months");
            String subscribed = rs.getString("No_subscribed");

            // Add a new row to the JTable
            model1.addRow(new Object[]{subid, price, duration, subscribed});
        }

        con.close();
    } catch (Exception e) {
        System.out.println(e.getMessage());
    }
    }//GEN-LAST:event_subscriptiontableviewActionPerformed

    private void jComboBoxSortSUBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSortSUBActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jComboBoxSortSUBActionPerformed

    private void subscriptionSORTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subscriptionSORTActionPerformed
        // TODO add your handling code here:
        try {
    String selectedOption = (String) jComboBoxSortSUB.getSelectedItem();

    Class.forName("com.mysql.cj.jdbc.Driver"); // Updated to use the correct driver
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

    Statement stm = con.createStatement();
    ResultSet rs = null;

    String sql = "";

    if ("price (Min-Max)".equalsIgnoreCase(selectedOption)) {
        sql = "SELECT * FROM subscriptions ORDER BY Price ASC";
    } else if ("price (Max-Min)".equalsIgnoreCase(selectedOption)) {
        sql = "SELECT * FROM subscriptions ORDER BY Price DESC";
    } else if ("Duration(Aescending)".equalsIgnoreCase(selectedOption)) {
        sql = "SELECT * FROM subscriptions ORDER BY Duration_in_Months ASC";
    } else if ("Duration(Descending)".equalsIgnoreCase(selectedOption)) {
        sql = "SELECT * FROM subscriptions ORDER BY Duration_in_Months DESC";
    }

    System.out.println("Executing Query: " + sql); // Print the SQL query to the console

    if (!sql.isEmpty()) {
        rs = stm.executeQuery(sql);
    }

    if (rs != null) {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) subscriptionTable.getModel();
        model.setRowCount(0);

        while (rs.next()) {
            String subID = rs.getString("Sub_ID");

            // Use getInt for integer columns
            int price = rs.getInt("Price");

            String duration = rs.getString("Duration_in_Months");
            String subscribed = rs.getString("No_Subscribed");

            model.addRow(new Object[]{subID, price, duration, subscribed});
        }

        con.close();
    }
} catch (Exception e) {
    e.printStackTrace();
}


    }//GEN-LAST:event_subscriptionSORTActionPerformed

    private void subscription_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subscription_backActionPerformed
        // TODO add your handling code here:
        dispose();
        HomePage h = new HomePage(b);
        h.show();
    }//GEN-LAST:event_subscription_backActionPerformed

    private void subidTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subidTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subidTEXTActionPerformed

    private void priceTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceTEXTActionPerformed

    private void subscriptionINSERTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subscriptionINSERTActionPerformed
        // TODO add your handling code here:
        try {
    // Retrieve data from text fields
    String subId = subidTEXT.getText();
    String priceText = priceTEXT.getText();
    String durationText = durationTEXT.getText();
    String noSubscribedText = subscribedTEXT.getText();

    // Check if any field is empty
    if(b == 1) {
        if (subId.isEmpty() || priceText.isEmpty() || durationText.isEmpty() || noSubscribedText.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Fill all the details", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if any field is empty
        }

        // Parse data to the appropriate types
        int price, duration, noSubscribed;

        try {
            price = Integer.parseInt(priceText);
            duration = Integer.parseInt(durationText);
            noSubscribed = Integer.parseInt(noSubscribedText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid format. Please enter valid numbers.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if there's an issue parsing the data
        }

        // Establish database connection
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

        // Check if the Sub_ID already exists
        if (isSubIDExists(con, subId)) {
            JOptionPane.showMessageDialog(null, "Subscription with Sub_ID " + subId + " already exists.", "Error", JOptionPane.ERROR_MESSAGE);
            con.close();
            return;
        }

        // Create and execute the SQL INSERT statement for subscriptions
        String sql = "INSERT INTO subscriptions (Sub_ID, Price, Duration_in_Months, No_Subscribed) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, subId);
            pstmt.setInt(2, price);
            pstmt.setInt(3, duration);
            pstmt.setInt(4, noSubscribed);

            // Execute the INSERT statement
            int rowsInserted = pstmt.executeUpdate();

            if (rowsInserted > 0) {
                // Display a popup message
                JOptionPane.showMessageDialog(null, "Subscription inserted successfully!");
                refreshSubscriptionsTable();
                subidTEXT.setText("");
                priceTEXT.setText("");
                durationTEXT.setText("");
                subscribedTEXT.setText("");
                
                // Update the subscription IDs in the JComboBox
                populateSubscriptionIDs();
            } else {
                System.out.println("Failed to insert subscription details. No rows affected.");
            }
        }
        // Close the database connection
        con.close();
    } else {
        JOptionPane.showMessageDialog(null, "Members do not have permission to insert.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
        refreshSubscriptionsTable();
    }
} catch (Exception ex) {
    ex.printStackTrace();
}


    }//GEN-LAST:event_subscriptionINSERTActionPerformed
    private boolean isSubIDExists(Connection con, String subId) throws SQLException {
        String checkSql = "SELECT COUNT(*) FROM subscriptions WHERE Sub_ID = ?";
            try (PreparedStatement checkStmt = con.prepareStatement(checkSql)) {
                checkStmt.setString(1, subId);
                try (ResultSet resultSet = checkStmt.executeQuery()) {
                if (resultSet.next()) {
                    int count = resultSet.getInt(1);
                    return count > 0;
            }
        }
    }
    return false;
}
    private void durationTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_durationTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_durationTEXTActionPerformed

    private void subid_delTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subid_delTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subid_delTEXTActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String deletesubID = subid_delTEXT.getText();

        // Check if the T_ID is empty
        if(b==1){
            if (deletesubID.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Enter a Subsription ID to delete", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Call the deleteTrainer method to perform the deletion
            deleteSubscription(deletesubID);
            populateSubscriptionIDs();
        }else{
            JOptionPane.showMessageDialog(null, "Members do not have permission to delete.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
            refreshSubscriptionsTable();
        }
        

        // Method to delete a trainer based on T_ID
//        


    }//GEN-LAST:event_jButton2ActionPerformed
    private void deleteSubscription(String SubID) {
        try {
        // Establish a database connection
        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52")) {
            // Create and execute the SQL DELETE statement
            String sql = "DELETE FROM subscriptions WHERE Sub_ID = ?";
            try (PreparedStatement pstmt = con.prepareStatement(sql)) {
                // Use setObject to handle both string and integer types
                pstmt.setObject(1, SubID);

                // Execute the DELETE statement
                int rowsDeleted = pstmt.executeUpdate();

                if (rowsDeleted > 0) {
                    System.out.println("Subscription with Sub_ID " + SubID + " deleted successfully!");
                    JOptionPane.showMessageDialog(null, "Deleted successfully.");

                    // Refresh the JTable to reflect the changes
                    refreshSubscriptionsTable();
                    // Optionally, clear the text field after successful deletion
                    subid_delTEXT.setText("");
                } else {
                    System.out.println("No Subscription found with Sub_ID " + SubID);
                    JOptionPane.showMessageDialog(null, "No Subscription found with Sub_ID " + SubID, "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
//        JOptionPane.showMessageDialog(null, "Error deleting subscription. Check the console for details.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void subscriptionUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subscriptionUpdateActionPerformed
        // TODO add your handling code here:
       try {
    // Retrieve data from text fields
    String priceText = up_priceTEXT.getText();
    String durationText = up_durationTEXT.getText();
    String noSubscribedText = up_subscribedTEXT.getText();

    // Get the selected Sub_ID from the JComboBox
    String selectedSubID = (String) updateOP.getSelectedItem();

    if (b == 1) {
        // Check if any field is empty
        if (selectedSubID.isEmpty() || priceText.isEmpty() || durationText.isEmpty() || noSubscribedText.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter all the details", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if any field is empty
        }

        // Parse data to the appropriate types
        int price, duration, noSubscribed;

        try {
            price = Integer.parseInt(priceText);
            duration = Integer.parseInt(durationText);
            noSubscribed = Integer.parseInt(noSubscribedText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid format. Please enter valid numbers.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if there's an issue parsing the data
        }

        // Establish database connection
        Class.forName("com.mysql.cj.jdbc.Driver");
        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52")) {
            // Execute SQL Update Statement
            String updateSql = "UPDATE subscriptions SET Price = ?, Duration_in_Months = ?, No_Subscribed = ? WHERE Sub_ID = ?";
            try (PreparedStatement pstmt = con.prepareStatement(updateSql)) {
                pstmt.setInt(1, price);
                pstmt.setInt(2, duration);
                pstmt.setInt(3, noSubscribed);
                pstmt.setString(4, selectedSubID); // Use the selected Sub_ID

                int rowsUpdated = pstmt.executeUpdate();

                if (rowsUpdated > 0) {
                    System.out.println("Subscription details updated successfully!");
                    JOptionPane.showMessageDialog(null, "Subscription updated successfully!");
                    // Optionally, you can display a success message or perform additional actions
                    refreshSubscriptionsTable();
                    up_priceTEXT.setText("");
                    up_durationTEXT.setText("");
                    up_subscribedTEXT.setText("");
                } else {
                    JOptionPane.showMessageDialog(null, "No subscription found with the selected ID. Update failed.", "Error", JOptionPane.ERROR_MESSAGE);
                    System.out.println("Failed to update subscription details. No rows affected.");
                    // Optionally, you can display an error message or perform additional actions
                }
            }
        }
        populateSubscriptionIDs(); // Update the JComboBox after a successful update
    } else {
        JOptionPane.showMessageDialog(null, "Members do not have permission to update.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
        refreshSubscriptionsTable();
    }
} catch (Exception ex) {
    ex.printStackTrace();
}

    }//GEN-LAST:event_subscriptionUpdateActionPerformed

    private void up_subscribedTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_up_subscribedTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_up_subscribedTEXTActionPerformed

    private void checkoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutActionPerformed
        // TODO add your handling code here:
        String packID = packIDTEXT.getText().trim();

    // Check if the pack ID is empty
    if (packID.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter a pack ID.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Execute the SQL query to fetch exercise details for the specified pack ID
    String sql = "SELECT e.Ex_Name, e.Type, e.Time_Slot " +
                 "FROM exercises e, consist c " +
                 "WHERE c.Exercise_ID = e.E_ID AND c.Pack_ID = ?";

    try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");
         PreparedStatement pstmt = con.prepareStatement(sql)) {

        // Set the pack ID parameter
        pstmt.setString(1, packID);

        // Execute the query
        try (ResultSet rs = pstmt.executeQuery()) {
            // Convert the ResultSet into a DefaultTableModel
            DefaultTableModel model = Utils.buildTableModel(rs);

            // Display the table containing exercise details in a popup window
            JTable table = new JTable(model);
            JOptionPane.showMessageDialog(null, new JScrollPane(table), "Exercise Details for Subscription ID: " + packID, JOptionPane.INFORMATION_MESSAGE);
            packIDTEXT.setText("");
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error: Unable to fetch exercise details.", "Error", JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_checkoutActionPerformed

    private void packIDTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_packIDTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_packIDTEXTActionPerformed

    private void subscriptionIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subscriptionIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subscriptionIDTextFieldActionPerformed

    private void checkoutMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutMemActionPerformed
        // TODO add your handling code here:
        String subscriptionID = subscriptionIDTextField.getText().trim();

    // Check if the subscription ID is empty
    if (subscriptionID.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter a subscription ID.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Execute the SQL query to fetch member details for the specified subscription ID
    String sql = "SELECT M_name, Phone " +
                 "FROM members " +
                 "WHERE Pack_ID = ?";

    try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");
         PreparedStatement pstmt = con.prepareStatement(sql)) {

        // Set the subscription ID parameter
        pstmt.setString(1, subscriptionID);

        // Execute the query
        try (ResultSet rs = pstmt.executeQuery()) {
            // Convert the ResultSet into a DefaultTableModel
            DefaultTableModel model = Utils.buildTableModel(rs);

            // Display the table containing member details in a popup window
            JTable table = new JTable(model);
            JOptionPane.showMessageDialog(null, new JScrollPane(table), "Members Subscribed to Subscription ID: " + subscriptionID, JOptionPane.INFORMATION_MESSAGE);
            subscriptionIDTextField.setText("");
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error: Unable to fetch member details.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_checkoutMemActionPerformed

    public class Utils {
    public static DefaultTableModel buildTableModel(ResultSet rs) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();

        // Get column names
        int columnCount = metaData.getColumnCount();
        Vector<String> columnNames = new Vector<>();
        for (int column = 1; column <= columnCount; column++) {
            columnNames.add(metaData.getColumnName(column));
        }

        // Get data rows
        Vector<Vector<Object>> data = new Vector<>();
        while (rs.next()) {
            Vector<Object> row = new Vector<>();
            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
                row.add(rs.getObject(columnIndex));
            }
            data.add(row);
        }

        // Create DefaultTableModel and return
        return new DefaultTableModel(data, columnNames);
    }
}
    /**
     * @param args the command line arguments
     */
    private void refreshSubscriptionsTable() {
    // Implement code to refresh the JTable (re-fetch data from the database and update the table model)
    // For example, if you have a method 'fetchTrainersData()' to fetch data, call it here
    // fetchTrainersData();
    DefaultTableModel model = (DefaultTableModel) subscriptionTable.getModel();
    model.setRowCount(0); // Clear existing data
    fetchSubscriptionData();
    // And then update the JTable model
    // jTable1.setModel(new DefaultTableModel(data, columnNames))
}
    
    private void fetchSubscriptionData() {
    try {
        // Establish a database connection
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

        // Create and execute the SQL SELECT statement
        String sql = "SELECT * FROM subscriptions";
        try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            DefaultTableModel model = (DefaultTableModel) subscriptionTable.getModel();
            model.setRowCount(0); // Clear existing data

            // Iterate through the result set and add rows to the table model
            while (rs.next()) {
                Object[] row = {
                    rs.getString("Sub_ID"),
                    rs.getInt("Price"),
                    rs.getString("Duration_in_Months"),
                    rs.getString("No_subscribed"),
                };
                model.addRow(row);
            }
        }

        // Close the database connection
        con.close();
    } catch (Exception ex) {
        ex.printStackTrace();
//        JOptionPane.showMessageDialog(null, "Error fetching trainer data. Check the console for details.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Subscriptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Subscriptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Subscriptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Subscriptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Subscriptions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkout;
    private javax.swing.JButton checkoutMem;
    private javax.swing.JTextField durationTEXT;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBoxSortSUB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField packIDTEXT;
    private javax.swing.JTextField priceTEXT;
    private javax.swing.JTextField subidTEXT;
    private javax.swing.JTextField subid_delTEXT;
    private javax.swing.JTextField subscribedTEXT;
    private javax.swing.JTextField subscriptionIDTextField;
    private javax.swing.JButton subscriptionINSERT;
    private javax.swing.JButton subscriptionSORT;
    private javax.swing.JTable subscriptionTable;
    private javax.swing.JButton subscriptionUpdate;
    private javax.swing.JButton subscription_back;
    private javax.swing.JButton subscriptiontableview;
    private javax.swing.JTextField up_durationTEXT;
    private javax.swing.JTextField up_priceTEXT;
    private javax.swing.JTextField up_subscribedTEXT;
    private javax.swing.JComboBox<String> updateOP;
    // End of variables declaration//GEN-END:variables
}
