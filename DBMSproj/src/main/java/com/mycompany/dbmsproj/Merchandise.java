/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.dbmsproj;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;

/**
 *
 * @author SWASTHIK
 */
public class Merchandise extends javax.swing.JFrame {
   int b;
    /**
     * Creates new form Merchandise
     */
    public Merchandise(int a) throws SQLException{
        b=a;
        initComponents();
        populateMerchandiseIDs();
        setExtendedState(Merchandise.MAXIMIZED_BOTH);
        if(b==0){
            jLabel1.setVisible(false);
            jLabel4.setVisible(false);
            jLabel6.setVisible(false);
            jLabel7.setVisible(false);
            jLabel8.setVisible(false);
            jLabel10.setVisible(false);
            jLabel11.setVisible(false);
            merchidTEXT.setVisible(false);
            colorTEXT.setVisible(false);
            priceTEXT.setVisible(false);
            typeTEXT.setVisible(false);
            soldTEXT.setVisible(false);
            instockTEXT.setVisible(false);
            merchandiseINSERT.setVisible(false);
            jLabel13.setVisible(false);
            merchid_delTEXT.setVisible(false);
            jLabel14.setVisible(false);
            merchidDEL.setVisible(false);
            jLabel15.setVisible(false);
            jLabel16.setVisible(false);
            jLabel19.setVisible(false);
            jLabel21.setVisible(false);
            jLabel22.setVisible(false);
            jLabel23.setVisible(false);
            jLabel25.setVisible(false);
            mer_upCombo.setVisible(false);
            up_colorTEXT.setVisible(false);
            up_priceTEXT.setVisible(false);
            up_typeTEXT.setVisible(false);
            up_soldTEXT.setVisible(false);
            up_instockTEXT.setVisible(false);
            merchUpdate.setVisible(false);
            jPanel1.setVisible(false);
            jPanel3.setVisible(false);
            jPanel4.setVisible(false);
        }
    }
   private Merchandise() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
   
   private void populateMerchandiseIDs() {
        try {
        // Establish database connection
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

        // Clear existing items in the JComboBox
        mer_upCombo.removeAllItems();

        // Execute SQL query to fetch Trainer IDs
        String query = "SELECT Merch_ID FROM merchandise";
        try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                Object merchID = rs.getObject("Merch_ID");
                mer_upCombo.addItem(merchID.toString());
            }
        }

        // Close the database connection
        con.close();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        merchandisetableview = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxSortMerch = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        merchandiseSORT = new javax.swing.JButton();
        subscription_back = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        merchidTEXT = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        colorTEXT = new javax.swing.JTextField();
        merchandiseINSERT = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        typeTEXT = new javax.swing.JTextField();
        soldTEXT = new javax.swing.JTextField();
        priceTEXT = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        instockTEXT = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        merchid_delTEXT = new javax.swing.JTextField();
        merchidDEL = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        merchUpdate = new javax.swing.JButton();
        up_colorTEXT = new javax.swing.JTextField();
        up_soldTEXT = new javax.swing.JTextField();
        up_priceTEXT = new javax.swing.JTextField();
        mer_upCombo = new javax.swing.JComboBox<>();
        up_typeTEXT = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        up_instockTEXT = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        merchandiseTable = new javax.swing.JTable();
        jButtonTypeSort = new javax.swing.JButton();
        jTextFieldType = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1920, 1080));

        jPanel2.setBackground(new java.awt.Color(153, 0, 51));
        jPanel2.setPreferredSize(new java.awt.Dimension(960, 1080));

        merchandisetableview.setBackground(new java.awt.Color(204, 204, 204));
        merchandisetableview.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        merchandisetableview.setText("View All");
        merchandisetableview.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        merchandisetableview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                merchandisetableviewActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Filters : ");

        jComboBoxSortMerch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "In_Stock(Aescending)", "In_Stock(Descending)", " ", " " }));
        jComboBoxSortMerch.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jComboBoxSortMerch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSortMerchActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Sort By");

        merchandiseSORT.setBackground(new java.awt.Color(204, 204, 204));
        merchandiseSORT.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        merchandiseSORT.setText("Sort");
        merchandiseSORT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        merchandiseSORT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                merchandiseSORTActionPerformed(evt);
            }
        });

        subscription_back.setBackground(new java.awt.Color(204, 204, 204));
        subscription_back.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        subscription_back.setText("<");
        subscription_back.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        subscription_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subscription_backActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Merchandise Management");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 2));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 51));
        jLabel1.setText("ADD New Merchandise : ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 41));

        jLabel7.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 51));
        jLabel7.setText("Merch_ID: ");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 80, 36));

        merchidTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        merchidTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        merchidTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                merchidTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(merchidTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, 140, 36));

        jLabel8.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 0, 51));
        jLabel8.setText("Color :");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 60, 35));

        colorTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        colorTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        colorTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(colorTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, 140, 40));

        merchandiseINSERT.setBackground(new java.awt.Color(153, 0, 51));
        merchandiseINSERT.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        merchandiseINSERT.setForeground(new java.awt.Color(255, 255, 255));
        merchandiseINSERT.setText("INSERT");
        merchandiseINSERT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        merchandiseINSERT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                merchandiseINSERTActionPerformed(evt);
            }
        });
        jPanel1.add(merchandiseINSERT, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 300, 70, 40));

        jLabel11.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 0, 51));
        jLabel11.setText("Sold :");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 160, 50, 33));

        jLabel10.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 0, 51));
        jLabel10.setText("Type :");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 100, 50, 36));

        typeTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        typeTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        typeTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(typeTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 100, 140, 40));

        soldTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        soldTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.add(soldTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 160, 140, 40));

        priceTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        priceTEXT.setMinimumSize(new java.awt.Dimension(64, 24));
        priceTEXT.setPreferredSize(new java.awt.Dimension(64, 24));
        priceTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(priceTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 220, 140, 40));

        jLabel4.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 0));
        jLabel4.setText("Price :");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, -1, -1));

        instockTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.add(instockTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 220, 140, 40));

        jLabel6.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 0));
        jLabel6.setText("In_Stock :");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 230, -1, -1));

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 2));

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 0, 51));
        jLabel13.setText("DELETE Merchandise : ");

        jLabel14.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(153, 0, 51));
        jLabel14.setText("Enter Merch_ID :");

        merchid_delTEXT.setFont(new java.awt.Font("Segoe UI Historic", 0, 14)); // NOI18N
        merchid_delTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        merchid_delTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                merchid_delTEXTActionPerformed(evt);
            }
        });

        merchidDEL.setBackground(new java.awt.Color(153, 0, 51));
        merchidDEL.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        merchidDEL.setForeground(new java.awt.Color(255, 255, 255));
        merchidDEL.setText("DELETE");
        merchidDEL.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        merchidDEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                merchidDELActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addContainerGap(94, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(merchid_delTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(merchidDEL, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(merchid_delTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(merchidDEL, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 2));
        jPanel4.setForeground(new java.awt.Color(153, 0, 51));

        jLabel15.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(153, 0, 51));
        jLabel15.setText("UPDATE Merchandise : ");

        jLabel16.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(153, 0, 51));
        jLabel16.setText("Select : ");

        jLabel19.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(153, 0, 51));
        jLabel19.setText("Color :");

        jLabel21.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(153, 0, 51));
        jLabel21.setText("In_Stock :");

        jLabel22.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(153, 0, 51));
        jLabel22.setText("Price :");

        merchUpdate.setBackground(new java.awt.Color(153, 0, 51));
        merchUpdate.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        merchUpdate.setForeground(new java.awt.Color(255, 255, 255));
        merchUpdate.setText("UPDATE");
        merchUpdate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        merchUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                merchUpdateActionPerformed(evt);
            }
        });

        up_colorTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        up_colorTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        up_soldTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        up_soldTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        up_priceTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        up_priceTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        up_priceTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                up_priceTEXTActionPerformed(evt);
            }
        });

        mer_upCombo.setToolTipText("");
        mer_upCombo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        up_typeTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        up_typeTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        up_typeTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                up_typeTEXTActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(153, 0, 51));
        jLabel23.setText("Type :");

        up_instockTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        up_instockTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel25.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(153, 0, 51));
        jLabel25.setText("Sold :");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel16)
                        .addGap(31, 31, 31)
                        .addComponent(mer_upCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel15))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(36, 36, 36)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(up_colorTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(up_priceTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(up_typeTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(up_soldTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addGap(18, 18, 18)
                                .addComponent(up_instockTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(239, 239, 239)
                        .addComponent(merchUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(mer_upCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(up_colorTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(up_soldTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(up_priceTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(up_instockTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(up_typeTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(merchUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        merchandiseTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        merchandiseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Merch_ID", "Color", "Price", "Type", "Sold", "In_Stock"
            }
        ));
        jScrollPane2.setViewportView(merchandiseTable);

        jButtonTypeSort.setBackground(new java.awt.Color(204, 204, 204));
        jButtonTypeSort.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        jButtonTypeSort.setText("Search");
        jButtonTypeSort.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonTypeSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTypeSortActionPerformed(evt);
            }
        });

        jTextFieldType.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jTextFieldType.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Type :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(subscription_back, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(316, 316, 316))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel5))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(123, 123, 123)
                                .addComponent(merchandisetableview, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 793, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(25, 25, 25)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBoxSortMerch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextFieldType, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonTypeSort, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(merchandiseSORT, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(390, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(subscription_back, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(merchandisetableview, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxSortMerch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(merchandiseSORT, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(66, 66, 66)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldType, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonTypeSort, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(249, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1920, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void merchandisetableviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_merchandisetableviewActionPerformed
        // TODO add your handling code here:
        try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false", "root", "swasthik@52");

        Statement st = con.createStatement();
        String sql = "SELECT * FROM merchandise";
        ResultSet rs = st.executeQuery(sql);

        // Clear existing data outside the loop
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) merchandiseTable.getModel();
        model.setRowCount(0);

        while (rs.next()) {
            String merchId = rs.getString("Merch_ID");
            String color = rs.getString("Color");
            String price = rs.getString("Price");
            String type = rs.getString("Type");
            String sold = rs.getString("No_Sold");
            String inStock = rs.getString("No_In_Stock");

            // Add a new row to the JTable
            model.addRow(new Object[]{merchId, color, price, type, sold, inStock});
        }

        con.close();
    } catch (Exception e) {
        System.out.println(e.getMessage());
    }
    }//GEN-LAST:event_merchandisetableviewActionPerformed

    private void jComboBoxSortMerchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSortMerchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxSortMerchActionPerformed

    private void merchandiseSORTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_merchandiseSORTActionPerformed
        // TODO add your handling code here:
        try {
    String selectedOption = (String) jComboBoxSortMerch.getSelectedItem();

    Class.forName("com.mysql.cj.jdbc.Driver");
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

    Statement stm = con.createStatement();
    ResultSet rs = null;

    String sql = "";

    if ("In_Stock(Aescending)".equalsIgnoreCase(selectedOption)) {
        sql = "SELECT * FROM merchandise ORDER BY No_In_Stock ASC";
    } else if ("In_Stock(Descending)".equalsIgnoreCase(selectedOption)) {
        sql = "SELECT * FROM merchandise ORDER BY No_In_Stock DESC";
    }

    System.out.println("Executing Query: " + sql); // Print the SQL query to the console

    if (!sql.isEmpty()) {
        rs = stm.executeQuery(sql);
    }

    if (rs != null) {
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) merchandiseTable.getModel();
        model.setRowCount(0);

        while (rs.next()) {
            String merchId = rs.getString("Merch_ID");
            String color = rs.getString("Color");
            int price = rs.getInt("Price");
            String type = rs.getString("Type");
            String sold = rs.getString("No_Sold");
            int inStock = rs.getInt("No_In_Stock");

            model.addRow(new Object[]{merchId, color, price, type, sold, inStock});
        }

        con.close();
    }
} catch (Exception e) {
    e.printStackTrace();
}


    }//GEN-LAST:event_merchandiseSORTActionPerformed

    private void subscription_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subscription_backActionPerformed
        // TODO add your handling code here:
        dispose();
        HomePage h = new HomePage(b);
        h.show();
    }//GEN-LAST:event_subscription_backActionPerformed

    private void merchidTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_merchidTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_merchidTEXTActionPerformed

    private void colorTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_colorTEXTActionPerformed

    private void merchandiseINSERTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_merchandiseINSERTActionPerformed
        // TODO add your handling code here:
        try {
    // Retrieve data from text fields
    String merchId = merchidTEXT.getText();
    String color = colorTEXT.getText();
    String priceText = priceTEXT.getText();
    String type = typeTEXT.getText();
    String sold = soldTEXT.getText();
    String stockText = instockTEXT.getText();

    // Check if any field is empty
    if(b==1){
    if (merchId.isEmpty() || color.isEmpty() || priceText.isEmpty() || type.isEmpty() || sold.isEmpty() || stockText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Fill all the details", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if any field is empty
    }

    // Parse data to the appropriate types
    int price, soldQty, inStock;

    try {
        price = Integer.parseInt(priceText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid format for price. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if there's an issue parsing the price
    }

    try {
        soldQty = Integer.parseInt(sold);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid format for sold quantity. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if there's an issue parsing the sold quantity
    }

    try {
        inStock = Integer.parseInt(stockText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid format for in-stock quantity. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if there's an issue parsing the in-stock quantity
    }

    // Establish database connection
    Class.forName("com.mysql.cj.jdbc.Driver");
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

    // Check if the merch_ID already exists
    if (isMerchIDExists(con, merchId)) {
        JOptionPane.showMessageDialog(null, "Merchandise with Merch_ID " + merchId + " already exists.", "Error", JOptionPane.ERROR_MESSAGE);
        con.close();
        return;
    }

    // Create and execute the SQL INSERT statement for merchandise
    String sql = "INSERT INTO merchandise (Merch_ID, Color, Price, Type, No_Sold, No_In_Stock) VALUES (?, ?, ?, ?, ?, ?)";
    try (PreparedStatement pstmt = con.prepareStatement(sql)) {
        pstmt.setString(1, merchId);
        pstmt.setString(2, color);
        pstmt.setInt(3, price);
        pstmt.setString(4, type);
        pstmt.setInt(5, soldQty);
        pstmt.setInt(6, inStock);

        // Execute the INSERT statement
        int rowsInserted = pstmt.executeUpdate();

        if (rowsInserted > 0) {
            // Display a popup message
            JOptionPane.showMessageDialog(null, "Merchandise inserted successfully!");
            // Optionally, you can refresh the merchandise table or perform additional actions
            refreshMerchandiseTable();
            merchidTEXT.setText("");
            colorTEXT.setText("");
            priceTEXT.setText("");
            typeTEXT.setText("");
            soldTEXT.setText("");
            instockTEXT.setText("");
            
            populateMerchandiseIDs();
        } else {
            System.out.println("Failed to insert merchandise details. No rows affected.");
        }
    }
    // Close the database connection
    con.close();
    }
    else{
        JOptionPane.showMessageDialog(null, "Members do not have permission to insert.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
        refreshMerchandiseTable();
    }
} catch (Exception ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(null, "Error inserting merchandise details. Check the console for details.", "Error", JOptionPane.ERROR_MESSAGE);
}


    }//GEN-LAST:event_merchandiseINSERTActionPerformed
private boolean isMerchIDExists(Connection con, String merchId) throws SQLException {
    String checkSql = "SELECT COUNT(*) FROM merchandise WHERE merch_ID = ?";
    try (PreparedStatement checkStmt = con.prepareStatement(checkSql)) {
        checkStmt.setString(1, merchId);
        try (ResultSet resultSet = checkStmt.executeQuery()) {
            if (resultSet.next()) {
                int count = resultSet.getInt(1);
                return count > 0;
            }
        }
    }
    return false;
}

    private void typeTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeTEXTActionPerformed

    private void merchid_delTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_merchid_delTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_merchid_delTEXTActionPerformed

    private void merchidDELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_merchidDELActionPerformed
        // TODO add your handling code here:
        String deletemerchID = merchid_delTEXT.getText();

        // Check if the T_ID is empty
        if(b==1){
            if (deletemerchID.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Enter a Merchandise ID to delete", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Call the deleteTrainer method to perform the deletion
            deleteMerchandise(deletemerchID);
            populateMerchandiseIDs();
        }else{
            JOptionPane.showMessageDialog(null, "Members do not have permission to delete.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
            refreshMerchandiseTable();
        }

        // Method to delete a trainer based on T_ID
        //

    }//GEN-LAST:event_merchidDELActionPerformed

    private void deleteMerchandise(String merchID) {
    try {
        // Establish a database connection
        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52")) {
            // Create and execute the SQL DELETE statement
            String sql = "DELETE FROM merchandise WHERE Merch_ID = ?";
            try (PreparedStatement pstmt = con.prepareStatement(sql)) {
                // Use setObject to handle both string and integer types
                pstmt.setObject(1, merchID);

                // Execute the DELETE statement
                int rowsDeleted = pstmt.executeUpdate();

                if (rowsDeleted > 0) {
                    System.out.println("Merchandise with Merch_ID " + merchID + " deleted successfully!");
                    JOptionPane.showMessageDialog(null, "Deleted successfully.");

                    // Refresh the JTable to reflect the changes
                    refreshMerchandiseTable();
                    // Optionally, clear the text field after successful deletion
                    merchid_delTEXT.setText("");
                } else {
                    System.out.println("No Merchandise found with merch_ID " + merchID);
                    JOptionPane.showMessageDialog(null, "No Merchandise found with merch_ID " + merchID, "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
        // JOptionPane.showMessageDialog(null, "Error deleting merchandise. Check the console for details.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    private void merchUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_merchUpdateActionPerformed
        // TODO add your handling code here:
        try {
    // Retrieve data from text fields
    String color = up_colorTEXT.getText();
    String priceText = up_priceTEXT.getText();
    String soldQtyText = up_soldTEXT.getText();
    String inStockText = up_instockTEXT.getText();
    String type = up_typeTEXT.getText();

    // Get the selected merch_ID from the JComboBox
    String selectedMerchID = (String) mer_upCombo.getSelectedItem();

    if (b == 1) {
        // Check if any field is empty
        if (selectedMerchID.isEmpty() || color.isEmpty() || type.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter all the details", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if any field is empty
        }

        // Parse data to the appropriate types
        int price = 0;
        int soldQty = 0;
        int inStock = 0;

        // Parse price if not empty
        if (!priceText.isEmpty()) {
            try {
                price = Integer.parseInt(priceText);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid price. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Parse sold quantity if not empty
        if (!soldQtyText.isEmpty()) {
            try {
                soldQty = Integer.parseInt(soldQtyText);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid sold quantity. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Parse in stock quantity if not empty
        if (!inStockText.isEmpty()) {
            try {
                inStock = Integer.parseInt(inStockText);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid in-stock quantity. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Establish database connection
        Class.forName("com.mysql.cj.jdbc.Driver");
        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52")) {
            // Execute SQL Update Statement
            String updateSql = "UPDATE merchandise SET Color = ?, Price = ?, Type = ?, No_Sold = ?, No_In_Stock = ? WHERE Merch_ID = ?";
            try (PreparedStatement pstmt = con.prepareStatement(updateSql)) {
                pstmt.setString(1, color);
                pstmt.setInt(2, price);
                pstmt.setString(3, type);
                pstmt.setInt(4, soldQty);
                pstmt.setInt(5, inStock);
                pstmt.setString(6, selectedMerchID); // Use the selected merch_ID

                int rowsUpdated = pstmt.executeUpdate();

                if (rowsUpdated > 0) {
                    System.out.println("Merchandise details updated successfully!");
                    JOptionPane.showMessageDialog(null, "Merchandise updated successfully!");
                    // Optionally, you can display a success message or perform additional actions
                    refreshMerchandiseTable();
                    up_colorTEXT.setText("");
                    up_priceTEXT.setText("");
                    up_soldTEXT.setText("");
                    up_instockTEXT.setText("");
                    up_typeTEXT.setText("");
                } else {
                    JOptionPane.showMessageDialog(null, "No merchandise found with the selected ID. Update failed.", "Error", JOptionPane.ERROR_MESSAGE);
                    System.out.println("Failed to update merchandise details. No rows affected.");
                    // Optionally, you can display an error message or perform additional actions
                }
            }
        }
        populateMerchandiseIDs(); // Update the JComboBox after a successful update
    } else {
        JOptionPane.showMessageDialog(null, "Members do not have permission to update.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
        refreshMerchandiseTable();
    }
} catch (Exception ex) {
    ex.printStackTrace();
    JOptionPane.showMessageDialog(null, "Error updating merchandise details. Check the console for details.", "Error", JOptionPane.ERROR_MESSAGE);
}



    }//GEN-LAST:event_merchUpdateActionPerformed

    private void up_priceTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_up_priceTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_up_priceTEXTActionPerformed

    private void priceTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceTEXTActionPerformed

    private void up_typeTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_up_typeTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_up_typeTEXTActionPerformed

    private void jButtonTypeSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTypeSortActionPerformed
        // TODO add your handling code here:
        try {
    String typeFilter = jTextFieldType.getText().trim(); // Get the entered type

    Class.forName("com.mysql.cj.jdbc.Driver");
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

    Statement stm = con.createStatement();
    ResultSet rs = null;

    String sql = "";

    // Add type filter to the query
    if (!typeFilter.isEmpty()) {
        sql = "SELECT * FROM merchandise WHERE Type ='"+ typeFilter +"'";
    } else {
        sql = "SELECT * FROM merchandise";
    }

    System.out.println("Executing Query: " + sql);

    if (!sql.isEmpty()) {
        rs = stm.executeQuery(sql);

        DefaultTableModel model = (DefaultTableModel) merchandiseTable.getModel();
        model.setRowCount(0);

        while (rs.next()) {
    // Populate the table with the filtered data
    String merchID = rs.getString("Merch_ID");
    String color = rs.getString("Color");
    int price = rs.getInt("Price");
    String type = rs.getString("Type");
    int soldQty = rs.getInt("No_Sold");
    int inStock = rs.getInt("No_In_Stock");
    

    model.addRow(new Object[]{merchID, color, price,type, soldQty, inStock });
}

        con.close();
    }
} catch (Exception e) {
    e.printStackTrace();
}

    }//GEN-LAST:event_jButtonTypeSortActionPerformed
private void refreshMerchandiseTable() {
    // Implement code to refresh the JTable (re-fetch data from the database and update the table model)
    // For example, if you have a method 'fetchTrainersData()' to fetch data, call it here
    // fetchTrainersData();
    DefaultTableModel model = (DefaultTableModel) merchandiseTable.getModel();
    model.setRowCount(0); // Clear existing data
    fetchMerchandiseData();
    // And then update the JTable model
    // jTable1.setModel(new DefaultTableModel(data, columnNames))
}
    
    private void fetchMerchandiseData() {
    try {
        // Establish a database connection
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

        // Create and execute the SQL SELECT statement
        String sql = "SELECT * FROM merchandise";
        try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            DefaultTableModel model = (DefaultTableModel) merchandiseTable.getModel();
            model.setRowCount(0); // Clear existing data

            // Iterate through the result set and add rows to the table model
            while (rs.next()) {
                Object[] row = {
                    rs.getString("Merch_ID"),
                    rs.getString("Color"),
                    rs.getInt("Price"),
                    rs.getString("Type"),
                    rs.getInt("No_Sold"),
                    rs.getInt("No_In_Stock")
                };
                model.addRow(row);
            }
        }

        // Close the database connection
        con.close();
    } catch (Exception ex) {
        ex.printStackTrace();
//        JOptionPane.showMessageDialog(null, "Error fetching merchandise data. Check the console for details.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Merchandise.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Merchandise.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Merchandise.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Merchandise.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Merchandise().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField colorTEXT;
    private javax.swing.JTextField instockTEXT;
    private javax.swing.JButton jButtonTypeSort;
    private javax.swing.JComboBox<String> jComboBoxSortMerch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextFieldType;
    private javax.swing.JComboBox<String> mer_upCombo;
    private javax.swing.JButton merchUpdate;
    private javax.swing.JButton merchandiseINSERT;
    private javax.swing.JButton merchandiseSORT;
    private javax.swing.JTable merchandiseTable;
    private javax.swing.JButton merchandisetableview;
    private javax.swing.JButton merchidDEL;
    private javax.swing.JTextField merchidTEXT;
    private javax.swing.JTextField merchid_delTEXT;
    private javax.swing.JTextField priceTEXT;
    private javax.swing.JTextField soldTEXT;
    private javax.swing.JButton subscription_back;
    private javax.swing.JTextField typeTEXT;
    private javax.swing.JTextField up_colorTEXT;
    private javax.swing.JTextField up_instockTEXT;
    private javax.swing.JTextField up_priceTEXT;
    private javax.swing.JTextField up_soldTEXT;
    private javax.swing.JTextField up_typeTEXT;
    // End of variables declaration//GEN-END:variables
}
