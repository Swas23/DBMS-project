/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.dbmsproj;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author SWASTHIK
 */
public class Exercises extends javax.swing.JFrame {
  int b;
    /**
     * Creates new form Exercises
     */
    public Exercises(int a) throws SQLException{
        b=a;
        initComponents();
        populateExerciseIDs();
        setExtendedState(Exercises.MAXIMIZED_BOTH);
        if(b==0){
            jLabel1.setVisible(false);
            jLabel7.setVisible(false);
            jLabel8.setVisible(false);
            jLabel10.setVisible(false);
            jLabel11.setVisible(false);
            jLabel4.setVisible(false);
            eidTEXT.setVisible(false);
            ExnameTEXT.setVisible(false);
            typeTEXT.setVisible(false);
            timeTEXT.setVisible(false);
            attendTEXT.setVisible(false);
            exerciseINSERT.setVisible(false);
            jLabel13.setVisible(false);
            eid_delTEXT.setVisible(false);
            jLabel14.setVisible(false);
            eidDEL.setVisible(false);
            jLabel15.setVisible(false);
            jLabel16.setVisible(false);
            exerciseJCombo.setVisible(false);
            jLabel19.setVisible(false);
            jLabel22.setVisible(false);
            upTimeTEXT.setVisible(false);
            up_AttendingTEXT.setVisible(false);
            exerciseUpdate.setVisible(false);
            jPanel1.setVisible(false);
            jPanel3.setVisible(false);
            jPanel4.setVisible(false);
        }
    }
    
    private Exercises() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    private void populateExerciseIDs() {
    try {
        // Establish database connection
        Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

        // Clear existing items in the JComboBox
        exerciseJCombo.removeAllItems();

        // Execute SQL query to fetch Exercise IDs
        String query = "SELECT E_ID FROM exercises";
        try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                Object exerciseID = rs.getObject("E_ID");
                exerciseJCombo.addItem(exerciseID.toString());
            }
        }

        // Close the database connection
        con.close();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        exercisetableview = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        exerciseSORT = new javax.swing.JButton();
        exercise_back = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        eidTEXT = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        ExnameTEXT = new javax.swing.JTextField();
        exerciseINSERT = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        typeTEXT = new javax.swing.JTextField();
        attendTEXT = new javax.swing.JTextField();
        timeTEXT = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        eid_delTEXT = new javax.swing.JTextField();
        eidDEL = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        exerciseUpdate = new javax.swing.JButton();
        upTimeTEXT = new javax.swing.JTextField();
        up_AttendingTEXT = new javax.swing.JTextField();
        exerciseJCombo = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        exerciseTable = new javax.swing.JTable();
        typeSort = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1920, 1080));

        jPanel2.setBackground(new java.awt.Color(153, 0, 51));
        jPanel2.setPreferredSize(new java.awt.Dimension(960, 1080));

        exercisetableview.setBackground(new java.awt.Color(204, 204, 204));
        exercisetableview.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        exercisetableview.setText("View All");
        exercisetableview.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        exercisetableview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exercisetableviewActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Filters : ");

        jLabel3.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Exercise Type :");

        exerciseSORT.setBackground(new java.awt.Color(204, 204, 204));
        exerciseSORT.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        exerciseSORT.setText("Search");
        exerciseSORT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        exerciseSORT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exerciseSORTActionPerformed(evt);
            }
        });

        exercise_back.setBackground(new java.awt.Color(204, 204, 204));
        exercise_back.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        exercise_back.setText("<");
        exercise_back.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        exercise_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exercise_backActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Exercise Management");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 2));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 51));
        jLabel1.setText("ADD New Exercise : ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 41));

        jLabel7.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 51));
        jLabel7.setText("E_ID: ");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 60, 36));

        eidTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        eidTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        eidTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eidTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(eidTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 143, 36));

        jLabel8.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 0, 51));
        jLabel8.setText("Ex_Name :");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 80, 35));

        ExnameTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ExnameTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        ExnameTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExnameTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(ExnameTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, 143, 40));

        exerciseINSERT.setBackground(new java.awt.Color(153, 0, 51));
        exerciseINSERT.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        exerciseINSERT.setForeground(new java.awt.Color(255, 255, 255));
        exerciseINSERT.setText("INSERT");
        exerciseINSERT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        exerciseINSERT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exerciseINSERTActionPerformed(evt);
            }
        });
        jPanel1.add(exerciseINSERT, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 310, 70, 40));

        jLabel11.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 0, 51));
        jLabel11.setText("No_Attending :");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 160, 110, 33));

        jLabel10.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 0, 51));
        jLabel10.setText("Time_slot :");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, 80, 36));

        typeTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        typeTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        typeTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(typeTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, 140, 40));

        attendTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        attendTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        attendTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attendTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(attendTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 160, 140, 40));

        timeTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        timeTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        timeTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeTEXTActionPerformed(evt);
            }
        });
        jPanel1.add(timeTEXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 100, 140, 40));

        jLabel4.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 51));
        jLabel4.setText("Type :");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 50, 40));

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 2));

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 0, 51));
        jLabel13.setText("DELETE Exercise : ");

        jLabel14.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(153, 0, 51));
        jLabel14.setText("Enter E_ID :");

        eid_delTEXT.setFont(new java.awt.Font("Segoe UI Historic", 0, 18)); // NOI18N
        eid_delTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        eid_delTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eid_delTEXTActionPerformed(evt);
            }
        });

        eidDEL.setBackground(new java.awt.Color(153, 0, 51));
        eidDEL.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        eidDEL.setForeground(new java.awt.Color(255, 255, 255));
        eidDEL.setText("DELETE");
        eidDEL.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        eidDEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eidDELActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(eidDEL, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(63, Short.MAX_VALUE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eid_delTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eid_delTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(eidDEL, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51), 2));
        jPanel4.setForeground(new java.awt.Color(153, 0, 51));

        jLabel15.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(153, 0, 51));
        jLabel15.setText("UPDATE Subscription : ");

        jLabel16.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(153, 0, 51));
        jLabel16.setText("Select : ");

        jLabel19.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(153, 0, 51));
        jLabel19.setText("Time_Slot :");

        jLabel22.setFont(new java.awt.Font("STXihei", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(153, 0, 51));
        jLabel22.setText("No_Attending :");

        exerciseUpdate.setBackground(new java.awt.Color(153, 0, 51));
        exerciseUpdate.setFont(new java.awt.Font("STXihei", 1, 12)); // NOI18N
        exerciseUpdate.setForeground(new java.awt.Color(255, 255, 255));
        exerciseUpdate.setText("UPDATE");
        exerciseUpdate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        exerciseUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exerciseUpdateActionPerformed(evt);
            }
        });

        upTimeTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        upTimeTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        up_AttendingTEXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        up_AttendingTEXT.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        up_AttendingTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                up_AttendingTEXTActionPerformed(evt);
            }
        });

        exerciseJCombo.setToolTipText("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel15))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(exerciseUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(215, 236, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel16)
                .addGap(31, 31, 31)
                .addComponent(exerciseJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(upTimeTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(up_AttendingTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(exerciseJCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(upTimeTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(up_AttendingTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                .addComponent(exerciseUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        exerciseTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        exerciseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "E_ID", "Ex_Name", "Type", "Time_Slot", "No_Attending"
            }
        ));
        jScrollPane2.setViewportView(exerciseTable);

        typeSort.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        typeSort.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(119, 119, 119)
                                .addComponent(exercisetableview, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(exercise_back, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jLabel5)))
                        .addGap(70, 70, 70)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(77, 77, 77)
                                        .addComponent(exerciseSORT, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(typeSort, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeSort, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addComponent(exerciseSORT, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(exercise_back, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(exercisetableview, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(253, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1920, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exercisetableviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exercisetableviewActionPerformed
        // TODO add your handling code here:
        try {
    Class.forName("com.mysql.cj.jdbc.Driver");
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false", "root", "swasthik@52");

    Statement st = con.createStatement();
    String sql = "SELECT * FROM exercises";
    ResultSet rs = st.executeQuery(sql);

    // Clear existing data outside the loop
    javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) exerciseTable.getModel();
    model.setRowCount(0);

    while (rs.next()) {
        String exerciseID = rs.getString("E_ID");
        String exerciseName = rs.getString("Ex_Name");
        String type = rs.getString("Type");
        String timeSlot = rs.getString("Time_Slot");
        int noAttending = rs.getInt("No_Attending");

        // Add a new row to the JTable
        model.addRow(new Object[]{exerciseID, exerciseName, type, timeSlot, noAttending});
    }

    con.close();
} catch (Exception e) {
    System.out.println(e.getMessage());
}


    }//GEN-LAST:event_exercisetableviewActionPerformed

    private void exerciseSORTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exerciseSORTActionPerformed
        // TODO add your handling code here:
        try {
    String typeFilter = typeSort.getText().trim(); // Get the entered type

    Class.forName("com.mysql.cj.jdbc.Driver");
    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

    Statement stm = con.createStatement();
    ResultSet rs = null;

    String sql = "";

    // Add type filter to the query
    if (!typeFilter.isEmpty()) {
        sql = "SELECT * FROM exercises WHERE Type ='"+ typeFilter +"'";
    } else {
        sql = "SELECT * FROM exercises";
    }

    System.out.println("Executing Query: " + sql);

    if (!sql.isEmpty()) {
        rs = stm.executeQuery(sql);

        DefaultTableModel model = (DefaultTableModel) exerciseTable.getModel();
        model.setRowCount(0);

        while (rs.next()) {
            // Populate the table with the filtered data
            String exerciseID = rs.getString("E_ID");
            String exerciseName = rs.getString("Ex_Name");
            String type = rs.getString("Type");
            String timeSlot = rs.getString("Time_Slot");
            int noAttending = rs.getInt("No_Attending");

            model.addRow(new Object[]{exerciseID, exerciseName, type, timeSlot, noAttending});
        }

        con.close();
    }
} catch (Exception e) {
    e.printStackTrace();
}


    }//GEN-LAST:event_exerciseSORTActionPerformed

    private void exercise_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exercise_backActionPerformed
        // TODO add your handling code here:
        dispose();
        HomePage h = new HomePage(b);
        h.show();
    }//GEN-LAST:event_exercise_backActionPerformed

    private void eidTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eidTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eidTEXTActionPerformed

    private void ExnameTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExnameTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ExnameTEXTActionPerformed

    private void exerciseINSERTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exerciseINSERTActionPerformed
        // TODO add your handling code here:
        try {
    // Retrieve data from text fields
    String exerciseID = eidTEXT.getText();
    String exerciseName = ExnameTEXT.getText();
    String type = typeTEXT.getText();
    String timeSlot = timeTEXT.getText();
    String noAttendingText = attendTEXT.getText();

    // Check if any field is empty
    if (exerciseID.isEmpty() || exerciseName.isEmpty() || type.isEmpty() || timeSlot.isEmpty() || noAttendingText.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Fill all the details", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if any field is empty
    }

    // Parse data to the appropriate types
    int noAttending;

    try {
        noAttending = Integer.parseInt(noAttendingText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid format for 'No Attending'. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if there's an issue parsing the data
    }

    // Validate time format
    if (!isValidTimeFormat(timeSlot)) {
        JOptionPane.showMessageDialog(null, "Invalid time format. Please enter time in HH:MM:SS format.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method if time format is invalid
    }

    // Establish database connection
    Class.forName("com.mysql.cj.jdbc.Driver");
    try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52")) {
        // Check if the exercise ID already exists
        if (isExerciseIDExists(con, exerciseID)) {
            JOptionPane.showMessageDialog(null, "Exercise with ID " + exerciseID + " already exists.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Create and execute the SQL INSERT statement for exercises
        String sql = "INSERT INTO exercises (E_ID, Ex_Name, Type, Time_Slot, No_Attending) VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = con.prepareStatement(sql)) {
            pstmt.setString(1, exerciseID);
            pstmt.setString(2, exerciseName);
            pstmt.setString(3, type);
            pstmt.setString(4, timeSlot);
            pstmt.setInt(5, noAttending);

            // Execute the INSERT statement
            int rowsInserted = pstmt.executeUpdate();

            if (rowsInserted > 0) {
                // Display a popup message
                JOptionPane.showMessageDialog(null, "Exercise inserted successfully!");
                refreshExerciseTable();
                eidTEXT.setText("");
                ExnameTEXT.setText("");
                typeTEXT.setText("");
                timeTEXT.setText("");
                attendTEXT.setText("");

                // Update the exercise IDs in the JComboBox
                populateExerciseIDs();
            } else {
                JOptionPane.showMessageDialog(null, "Failed to insert exercise details.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
} catch (Exception ex) {
    ex.printStackTrace();
}

    }//GEN-LAST:event_exerciseINSERTActionPerformed

    private boolean isValidTimeFormat(String time) {
    String regex = "([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]";
    return time.matches(regex);
}
    
    private boolean isExerciseIDExists(Connection con, String exerciseID) throws SQLException {
    String sql = "SELECT COUNT(*) AS count FROM exercises WHERE E_ID = ?";
    try (PreparedStatement pstmt = con.prepareStatement(sql)) {
        pstmt.setString(1, exerciseID);
        try (ResultSet rs = pstmt.executeQuery()) {
            if (rs.next()) {
                int count = rs.getInt("count");
                return count > 0;
            }
        }
    }
    return false;
}

    private void typeTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeTEXTActionPerformed

    private void eid_delTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eid_delTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eid_delTEXTActionPerformed

    private void eidDELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eidDELActionPerformed
        // TODO add your handling code here:
        String deleteEID = eid_delTEXT.getText();

        // Check if the T_ID is empty
        if(b==1){
            if (deleteEID.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Enter a Exercise ID to delete", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Call the deleteTrainer method to perform the deletion
            deleteExercise(deleteEID);
            populateExerciseIDs();
        }else{
            JOptionPane.showMessageDialog(null, "Members do not have permission to delete.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
            refreshExerciseTable();
        }

        // Method to delete a trainer based on T_ID
        //

    }//GEN-LAST:event_eidDELActionPerformed

    private void deleteExercise(String ExerciseID) {
    try {
        // Establish a database connection
        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52")) {
            // Create and execute the SQL DELETE statement
            String sql = "DELETE FROM exercises WHERE E_ID = ?";
            try (PreparedStatement pstmt = con.prepareStatement(sql)) {
                // Use setObject to handle both string and integer types
                pstmt.setObject(1, ExerciseID);

                // Execute the DELETE statement
                int rowsDeleted = pstmt.executeUpdate();

                if (rowsDeleted > 0) {
                    System.out.println("Exercise with Exercise_ID " + ExerciseID + " deleted successfully!");
                    JOptionPane.showMessageDialog(null, "Deleted successfully.");

                    // Refresh the JTable to reflect the changes
                    refreshExerciseTable();
                    // Optionally, clear the text field after successful deletion
                    eid_delTEXT.setText("");
                } else {
                    System.out.println("No Exercise found with Exercise_ID " + ExerciseID);
                    JOptionPane.showMessageDialog(null, "No Exercise found with Exercise_ID " + ExerciseID, "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
        // Handle the exception, such as showing an error message
    }
}
    private void exerciseUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exerciseUpdateActionPerformed
        // TODO add your handling code here:
        try {
    // Retrieve data from text fields
    String timeSlot = upTimeTEXT.getText();
    String noAttendingText = up_AttendingTEXT.getText();

    // Get the selected E_ID from the JComboBox
    String selectedExerciseID = (String) exerciseJCombo.getSelectedItem();

    if (b == 1) {
        // Check if any field is empty
        if (selectedExerciseID.isEmpty() || timeSlot.isEmpty() || noAttendingText.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter all the details", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if any field is empty
        }

        // Check if time format is valid
        if (!isValidTimeFormat(timeSlot)) {
            JOptionPane.showMessageDialog(null, "Invalid time format. Please enter time in HH:MM:SS format.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if time format is invalid
        }

        // Parse data to the appropriate types
        int noAttending;

        try {
            noAttending = Integer.parseInt(noAttendingText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid format. Please enter a valid number for No Attending.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if there's an issue parsing the data
        }

        // Establish database connection
        Class.forName("com.mysql.cj.jdbc.Driver");
        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52")) {
            // Execute SQL Update Statement
            String updateSql = "UPDATE exercises SET Time_Slot = ?, No_Attending = ? WHERE E_ID = ?";
            try (PreparedStatement pstmt = con.prepareStatement(updateSql)) {
                pstmt.setString(1, timeSlot);
                pstmt.setInt(2, noAttending);
                pstmt.setString(3, selectedExerciseID); // Use the selected E_ID

                int rowsUpdated = pstmt.executeUpdate();

                if (rowsUpdated > 0) {
                    System.out.println("Exercise details updated successfully!");
                    JOptionPane.showMessageDialog(null, "Exercise updated successfully!");
                    // Optionally, you can display a success message or perform additional actions
                    refreshExerciseTable();
                    upTimeTEXT.setText("");
                    up_AttendingTEXT.setText("");
                } else {
                    JOptionPane.showMessageDialog(null, "No exercise found with the selected ID. Update failed.", "Error", JOptionPane.ERROR_MESSAGE);
                    System.out.println("Failed to update exercise details. No rows affected.");
                    // Optionally, you can display an error message or perform additional actions
                }
            }
        }
        populateExerciseIDs(); // Update the JComboBox after a successful update
    } else {
        JOptionPane.showMessageDialog(null, "Members do not have permission to update.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
        refreshExerciseTable();
    }
} catch (Exception ex) {
    ex.printStackTrace();
}
    }//GEN-LAST:event_exerciseUpdateActionPerformed


    private void up_AttendingTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_up_AttendingTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_up_AttendingTEXTActionPerformed

    private void timeTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeTEXTActionPerformed

    private void attendTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attendTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_attendTEXTActionPerformed
    
    private void refreshExerciseTable() {
    DefaultTableModel model = (DefaultTableModel) exerciseTable.getModel();
    model.setRowCount(0); // Clear existing data
    fetchExerciseData();
}

private void fetchExerciseData() {
    try {
        // Establish a database connection
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/gym?useSSL=false&allowPublicKeyRetrieval=true", "root", "swasthik@52");

        // Create and execute the SQL SELECT statement
        String sql = "SELECT * FROM exercises";
        try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            DefaultTableModel model = (DefaultTableModel) exerciseTable.getModel();
            model.setRowCount(0); // Clear existing data

            // Iterate through the result set and add rows to the table model
            while (rs.next()) {
                Object[] row = {
                    rs.getString("E_ID"),
                    rs.getString("Ex_Name"),
                    rs.getString("Type"),
                    rs.getString("Time_Slot"),
                    rs.getInt("No_Attending")
                };
                model.addRow(row);
            }
        }

        // Close the database connection
        con.close();
    } catch (Exception ex) {
        ex.printStackTrace();
        // Handle the exception, such as showing an error message
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Exercises.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Exercises.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Exercises.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Exercises.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Exercises().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ExnameTEXT;
    private javax.swing.JTextField attendTEXT;
    private javax.swing.JButton eidDEL;
    private javax.swing.JTextField eidTEXT;
    private javax.swing.JTextField eid_delTEXT;
    private javax.swing.JButton exerciseINSERT;
    private javax.swing.JComboBox<String> exerciseJCombo;
    private javax.swing.JButton exerciseSORT;
    private javax.swing.JTable exerciseTable;
    private javax.swing.JButton exerciseUpdate;
    private javax.swing.JButton exercise_back;
    private javax.swing.JButton exercisetableview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField timeTEXT;
    private javax.swing.JTextField typeSort;
    private javax.swing.JTextField typeTEXT;
    private javax.swing.JTextField upTimeTEXT;
    private javax.swing.JTextField up_AttendingTEXT;
    // End of variables declaration//GEN-END:variables
}
